<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ConfirmPasswordLabel" xml:space="preserve">
    <value>Confirm Password</value>
  </data>
  <data name="CreateAccountButton" xml:space="preserve">
    <value>Create Account</value>
  </data>
  <data name="EmailFormatError" xml:space="preserve">
    <value>Invalid e-mail format.</value>
  </data>
  <data name="EmailLabel" xml:space="preserve">
    <value>E-mail</value>
  </data>
  <data name="EmailRequiredError" xml:space="preserve">
    <value>E-mail is required.</value>
  </data>
  <data name="ErrorUnexpected" xml:space="preserve">
    <value>An unexpected error occurred.</value>
  </data>
  <data name="LoginWelcome" xml:space="preserve">
    <value>Welcome To WhatMunch</value>
  </data>
  <data name="PasswordFormatError" xml:space="preserve">
    <value>Must contain at least one lowercase, uppercase and numeric character.</value>
  </data>
  <data name="PasswordLabel" xml:space="preserve">
    <value>Password</value>
  </data>
  <data name="PasswordMatchError" xml:space="preserve">
    <value>Passwords do not match.</value>
  </data>
  <data name="PasswordMinLengthError" xml:space="preserve">
    <value>Must be at least 8 characters.</value>
  </data>
  <data name="PasswordRequiredError" xml:space="preserve">
    <value>Password is required.</value>
  </data>
  <data name="RegisterWelcome" xml:space="preserve">
    <value>Register for WhatMunch</value>
  </data>
  <data name="SearchReturned" xml:space="preserve">
    <value>Search returned</value>
  </data>
  <data name="SubmitButton" xml:space="preserve">
    <value>Submit</value>
  </data>
  <data name="UsernameFormatError" xml:space="preserve">
    <value>Letters, digits and @/./+/-/_ only.</value>
  </data>
  <data name="UsernameLabel" xml:space="preserve">
    <value>Username</value>
  </data>
  <data name="UsernameMaxLengthError" xml:space="preserve">
    <value>Must be less than 150 characters.</value>
  </data>
  <data name="UsernameMinLengthError" xml:space="preserve">
    <value>Must be at least 3 characters.</value>
  </data>
  <data name="UsernameRequiredError" xml:space="preserve">
    <value>Username is required.</value>
  </data>
  <data name="GoToLoginButton" xml:space="preserve">
    <value>Login</value>
  </data>
  <data name="Search" xml:space="preserve">
    <value>Search</value>
  </data>
  <data name="Logout" xml:space="preserve">
    <value>Logout</value>
  </data>
  <data name="Ok" xml:space="preserve">
    <value>Ok</value>
  </data>
  <data name="Error" xml:space="preserve">
    <value>Error</value>
  </data>
  <data name="ErrorInternetConnection" xml:space="preserve">
    <value>Please check your internet connection.</value>
  </data>
  <data name="ErrorLocationServices" xml:space="preserve">
    <value>Location services on this device could not be accessed.</value>
  </data>
  <data name="NoPlacesFound" xml:space="preserve">
    <value>No places found.</value>
  </data>
  <data name="SearchPreferences" xml:space="preserve">
    <value>Search Preferences</value>
  </data>
  <data name="MinimumRating" xml:space="preserve">
    <value>Minimum Rating</value>
  </data>
  <data name="MaxPriceLevel" xml:space="preserve">
    <value>Max Price Level</value>
  </data>
  <data name="VegetarianOptions" xml:space="preserve">
    <value>Vegetarian Options</value>
  </data>
  <data name="VeganOptions" xml:space="preserve">
    <value>Vegan Options</value>
  </data>
  <data name="ChildFriendly" xml:space="preserve">
    <value>Child Friendly</value>
  </data>
  <data name="DogFriendly" xml:space="preserve">
    <value>Dog Friendly</value>
  </data>
  <data name="WithinAnApproximately" xml:space="preserve">
    <value>Within an Approximately:</value>
  </data>
  <data name="SortBy" xml:space="preserve">
    <value>Sort By:</value>
  </data>
  <data name="Distance" xml:space="preserve">
    <value>Distance</value>
  </data>
  <data name="Relevance" xml:space="preserve">
    <value>Relevance</value>
  </data>
  <data name="SavePreferences" xml:space="preserve">
    <value>Save Preferences</value>
  </data>
  <data name="5MinWalk" xml:space="preserve">
    <value>5 Minute Walk</value>
  </data>
  <data name="10MinWalk" xml:space="preserve">
    <value>10 Minute Walk</value>
  </data>
  <data name="15MinWalk" xml:space="preserve">
    <value>15 Minute Walk</value>
  </data>
  <data name="Inexpensive" xml:space="preserve">
    <value>Inexpensive</value>
  </data>
  <data name="Moderate" xml:space="preserve">
    <value>Moderate</value>
  </data>
  <data name="Expensive" xml:space="preserve">
    <value>Expensive</value>
  </data>
  <data name="VeryExpensive" xml:space="preserve">
    <value>Very Expensive</value>
  </data>
  <data name="20MinWalk" xml:space="preserve">
    <value>20 Minute Walk</value>
  </data>
  <data name="UpdatedPreferences" xml:space="preserve">
    <value>Updated Preferences</value>
  </data>
  <data name="Next" xml:space="preserve">
    <value>Next</value>
  </data>
  <data name="Previous" xml:space="preserve">
    <value>Previous</value>
  </data>
  <data name="OpeningHours" xml:space="preserve">
    <value>Opening Hours:</value>
  </data>
  <data name="PhoneNumber" xml:space="preserve">
    <value>Phone Number:</value>
  </data>
  <data name="Website" xml:space="preserve">
    <value>Website:</value>
  </data>
  <data name="Address" xml:space="preserve">
    <value>Address:</value>
  </data>
  <data name="NotAvailable" xml:space="preserve">
    <value>Not Available</value>
  </data>
  <data name="OpenNow" xml:space="preserve">
    <value>Open Now</value>
  </data>
  <data name="establishment" xml:space="preserve">
    <value>establishment</value>
  </data>
  <data name="point_of_interest" xml:space="preserve">
    <value>point_of_interest</value>
  </data>
  <data name="VegetarianRestaurant" xml:space="preserve">
    <value>Vegetarian Restaurant</value>
  </data>
  <data name="VeganRestaurant" xml:space="preserve">
    <value>Vegan Restaurant</value>
  </data>
  <data name="food" xml:space="preserve">
    <value>food</value>
  </data>
  <data name="Vegan" xml:space="preserve">
    <value>Vegan</value>
  </data>
  <data name="Vegetarian" xml:space="preserve">
    <value>Vegetarian</value>
  </data>
  <data name="30MinWalk" xml:space="preserve">
    <value>30+ Minute Walk</value>
  </data>
  <data name="Closed" xml:space="preserve">
    <value>Closed</value>
  </data>
  <data name="Reviews" xml:space="preserve">
    <value>Reviews:</value>
  </data>
</root>